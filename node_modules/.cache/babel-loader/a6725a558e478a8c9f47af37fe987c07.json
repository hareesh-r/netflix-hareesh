{"ast":null,"code":"var _jsxFileName = \"D:\\\\LEARNING\\\\React JS\\\\Netflix\\\\netflix-clone\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport axios from './axios';\nimport React, { useState, useEffect } from 'react';\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row({\n  title,\n  fetchURL,\n  isLarger\n}) {\n  _s();\n\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\n  const [movies, setMovies] = useState([]);\n  const [trailerURL, setTrailerURL] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchURL);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchURL]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerURL) {\n      setTrailerURL(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        urlParams.get('v');\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", title, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLarger && \"row__posterLarger\"}`,\n        src: `${base_url}${isLarger ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), trailerURL && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoID: trailerURL,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"nyyF1Xknyh/G+RWuEUTsZkVYOyg=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["D:/LEARNING/React JS/Netflix/netflix-clone/src/Row.js"],"names":["axios","React","useState","useEffect","YouTube","movieTrailer","Row","title","fetchURL","isLarger","base_url","movies","setMovies","trailerURL","setTrailerURL","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;;AAEA,SAASC,GAAT,CAAc;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAkBC,EAAAA;AAAlB,CAAd,EAA6C;AAAA;;AAEzC,QAAMC,QAAQ,GAAG,sCAAjB;AACA,QAAM,CAACC,MAAD,EAAUC,SAAV,IAAuBV,QAAQ,CAAC,EAAD,CAArC;AAEA,QAAM,CAACW,UAAD,EAAcC,aAAd,IAA+BZ,QAAQ,CAAC,EAAD,CAA7C;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACV,mBAAeY,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CAAUT,QAAV,CAAtB;AACAI,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GAPQ,EAOP,CAACP,QAAD,CAPO,CAAT;AASA,QAAMY,IAAI,GAAE;AACRC,IAAAA,MAAM,EAAE,KADA;AAERC,IAAAA,KAAK,EAAE,MAFC;AAGRC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF;AAHJ,GAAZ;;AAOA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAIb,UAAJ,EAAgB;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFH,MAES;AACLT,MAAAA,YAAY,CAAE,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAjB,CAAZ,CACCC,IADD,CACOC,GAAD,IAAO;AACT,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAH,QAAAA,SAAS,CAACb,GAAV,CAAc,GAAd;AACH,OAJD,EAKCiB,KALD,CAKQC,KAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CALhB;AAMD;AACN,GAXD;;AAaA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,sBAAO5B,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAEQI,MAAM,CAAC2B,GAAP,CAAWZ,KAAK,iBACZ;AACA,QAAA,OAAO,EAAE,MAAID,WAAW,CAACC,KAAD,CADxB;AAEe,QAAA,SAAS,EAAG,eAAcjB,QAAQ,IAAI,mBAAoB,EAFzE;AAE4E,QAAA,GAAG,EAAG,GAAEC,QAAS,GAAED,QAAQ,GAAGiB,KAAK,CAACa,WAAT,GAAuBb,KAAK,CAACc,aAAc,EAFlJ;AAEqJ,QAAA,GAAG,EAAEd,KAAK,CAACC;AAFhK,SAEKD,KAAK,CAACe,EAFX;AAAA;AAAA;AAAA;AAAA,cADJ;AAFR;AAAA;AAAA;AAAA;AAAA,YAFJ,EAWK5B,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YAXnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAnDQd,G;;KAAAA,G;AAqDT,eAAeA,GAAf","sourcesContent":["import axios from './axios';\r\nimport React, {useState,useEffect} from 'react'\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nfunction Row( { title, fetchURL,isLarger } ) {\r\n\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n    const [movies , setMovies] = useState([]);\r\n\r\n    const [trailerURL , setTrailerURL] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchURL);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[fetchURL]);\r\n\r\n    const opts ={\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n    const handleClick = (movie) => {\r\n        if (trailerURL) {\r\n            setTrailerURL(\"\");\r\n          } else {\r\n            movieTrailer( movie?.name || \"\")\r\n            .then((url)=>{\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                urlParams.get('v');\r\n            })\r\n            .catch((error)=>console.log(error));\r\n          }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2> { title } </h2>\r\n            <div className=\"row__posters\">\r\n                {\r\n                    movies.map(movie => (\r\n                        <img\r\n                        onClick={()=>handleClick(movie)}\r\n                        key={movie.id} className={`row__poster ${isLarger && \"row__posterLarger\"}`} src={`${base_url}${isLarger ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\r\n                    ))\r\n                }\r\n            </div>\r\n            {trailerURL && <YouTube videoID={trailerURL} opts={opts}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row"]},"metadata":{},"sourceType":"module"}